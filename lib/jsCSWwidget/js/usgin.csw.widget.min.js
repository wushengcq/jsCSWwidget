/**
 * @package USGIN CSW Web Client Widget
 * @author  Wenwen Li <wenwen@asu.edu>
 * @author  Sheng Wu <wushengcq@gmail.com>
 * @organ   GeoDa Center for Geospatial Analysis and Computation
 *          School of Geographical Sciences and Urban Planning
 *          Arizona State University
 * @version 1.0.0
 * @license https://github.com/usgin/jsCSWwidget/blob/master/LICENSE
 */
usgin = function(){}
usgin.Util = {}
usgin.Util.isFunction = function(fun) {
	return (typeof fun === 'function');
}
usgin.Util.validVar = function(obj) {
	if( obj instanceof Array) {
		var b = true;
		for(var i=0; i<obj.length; i++){
			b = b && !(typeof obj[i] === 'undefined' || obj[i] === null);
		}
		return b;
	}else{
		return !(typeof obj === 'undefined' || obj === null);
	}
}
usgin.Util.getBrowserInfo = function() {
	var ua=navigator.userAgent, tem, M=ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || []; 
	if (/trident/i.test(M[1])) {
		tem=/\brv[ :]+(\d+)/g.exec(ua) || []; 
		return {name: 'MSIE', version: tem[1]||''};
	}   
	if (M[1]==='Chrome') {
		tem=ua.match(/\bOPR\/(\d+)/)
		//if(tem!=null)   {return 'Opera '+tem[1];}
		if(tem!=null)   {return {name:'Opera', version:tem[1]}; }
	}   
	M = M[2]? [M[1], M[2]]: [navigator.appName, navigator.appVersion, '-?'];
	if ((tem=ua.match(/version\/(\d+)/i))!=null) { M.splice(1,1,tem[1]); }
	return {
		name: M[0],
		version: M[1]
	};
}
usgin.Util.toType = function(obj) {
	return ({}).toString.call(obj).match(/\s([a-z|A-Z]+)/)[1].toLowerCase();
}
usgin.Util.toXML = function(str) {
	var browser = usgin.Util.getBrowserInfo();
	if (browser.name === 'MSIE') {
		var xml = new ActiveXObject("Microsoft.XMLDOM");
		xml.loadXML(str);	
		return xml;
	} else {
		return (new DOMParser()).parseFromString(str, "text/xml");	
	}
}
usgin.Logger = function(lv) {
	var level = lv ? lv : 1;
	this.getLevel = function() {return level;}
	this.setLevel = function(v) {level = v;}
}
usgin.Logger.LEVELS = {
	DEBUG:1, INFO:2, WARN:3, ERROR:4
};
usgin.Logger.prototype.out = function(msg, level) {
	if(this.getLevel() <= level && window.console) {
		switch(level) {
		case usgin.Logger.LEVELS.DEBUG:
			console.log(msg); break;
		case usgin.Logger.LEVELS.INFO:
			console.info(msg); break;
		case usgin.Logger.LEVELS.WARN:
			console.warn(msg); break;
		case usgin.Logger.LEVELS.ERROR:
			console.error(msg); break;
		default:
			console.log(msg);
		}
		return true;
	}
	return false;
}
usgin.Logger.prototype.debug = function(msg) {
	return this.out(msg, usgin.Logger.LEVELS.DEBUG);
}
usgin.Logger.prototype.info = function(msg) {
	return this.out(msg, usgin.Logger.LEVELS.INFO);
}
usgin.Logger.prototype.warn = function(msg) {
	return this.out(msg, usgin.Logger.LEVELS.WARN);
}
usgin.Logger.prototype.error = function(msg) {
	return this.out(msg, usgin.Logger.LEVELS.ERROR);
}
usgin.Ajax = function(url, enable_cache, params) {
	this.url = url;
	this.cached = enable_cache;
	this.params = params;
	this.logger = new usgin.Logger();
	return this;
};
usgin.Ajax.prototype.assembleParams = function(params) {
	var kvps = [];
	var ec = encodeURIComponent;
	for (var key in params) {
		if (params[key] !== null) {
			kvps.push(ec(key) + '=' + ec(params[key]));
		}
	}
	return kvps.join('&');
}
usgin.Ajax.prototype.get = function(success, error) {
	var request = this.url + "?" + this.assembleParams(this.params);
	request += this.cached ? '' : '&_t='+(new Date()).getTime(); 
	this.logger.info(request);
	var xhr = this.xhrWrap('GET', request, null, success, error);
}
usgin.Ajax.prototype.post = function(success, error, cached) {
	var data = this.assembleParams(this.params);
	data += this.cached ? '' : '&_t='+(new Date()).getTime(); 
	this.logger.info(data);
	this.xhrWrap('POST', this.url, data, success, error);
}
usgin.Ajax.prototype.xhrWrap = function(method, url, data, success, error) {
	var xhr = this.getXHR();
	if (!xhr) return false;
	xhr.open(method, url, true);
	xhr.setRequestHeader('X-Request-With', 'XMLHttpRequest');
	xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
	xhr.onreadystatechange = function() {
		if (xhr.readyState > 3 && success) {
			if (xhr.status === 200 ) {
				if (xhr.responseXML != null) {
					success(xhr.responseXML, xhr);
				} else {
					success(usgin.Util.toXML(xhr.responseText, xhr));
				}
			} else {
				error(xhr.responseText, xhr);		
			}
		}
	}
	xhr.send(data);
	return xhr;
}
usgin.Ajax.prototype.getXHR = function() {
	var root = ('undefined' == typeof window) ? this : window;
	for( a=4; a--; ){
		try{
			return new(root.XMLHttpRequest || root.ActiveXObject)([
				"Mxxml2.XMLHTTP",
				"Msxml2.XMLHTTP.3.0",
				"Msxml2.XMLHTTP.6.0",
				"Microsoft.XMLHTTP"][a]);
		}catch(e){}
	}
	return false;
}
usgin.Xml = {};
usgin.Xml.getXmlParser = function(browser, namespaces) {
	var parser = null;
	if (browser.name === 'MSIE') {
		parser = new usgin.Xml.IE();
	}else{
		parser = new usgin.Xml.Base();
	}
	parser.setNamespaces(namespaces);
	return parser;
}
usgin.Xml.Base = function() {
	this.logger = new usgin.Logger();
	this.namespaces = {};
}
usgin.Xml.Base.prototype = {};
usgin.Xml.Base.prototype.setNamespaces = function(nss) {
	this.namespaces = nss;
}
usgin.Xml.Base.prototype.getNamespaces = function() {
	return this.namespaces;
}
usgin.Xml.Base.prototype.getNamespace = function(abbr) {
	return this.getNamespaces()[abbr];
}
usgin.Xml.Base.prototype.getNodeByAttr = function(xml, tag, attr, val) {
	var ns = this.getNodesByAttr(xml, tag, attr, val);
	return ns.length > 0 ? ns[0] : null;
}
usgin.Xml.Base.prototype.getNodesByAttr = function(xml, tag, attr, val) {
	var ns = this.getNodesByTag(xml, tag);
	var rslt = [];
	val = val.toUpperCase();
	for (var i=0; i<ns.length; i++) {
		if (ns[i].getAttribute(attr).toUpperCase() === val) {
			rslt.push(ns[i]);
		}
	}			
	return rslt;
}
usgin.Xml.Base.prototype.getNodeByTag = function(xml, tag) {
	var ns = this.getNodesByTag(xml, tag);	
	return ns.length > 0 ? ns[0] : null;
}
usgin.Xml.Base.prototype.getNodesByTag = function(xml, tag) {
	if (!usgin.Util.validVar([xml, tag])) return [];
	var path = tag.split("/");
	var p = xml;
	for(var i=1; i<=path.length; i++) {
		if (i == path.length) {
			return this._getNodesByTag(p, path[i-1]);
		}else{
			p = this._getNodesByTag(p, path[i-1]);
			if (p.length == 0){
				 return [];
			}else{
				p = p[0];
			}
		}
	}
}
usgin.Xml.Base.prototype.getNodeValByTag = function(xml, tag) {
	var n = this.getNodeByTag(xml, tag);
	return usgin.Util.validVar(n) && n.childNodes.length > 0 ? n.childNodes[0].nodeValue : null;
}
usgin.Xml.Base.prototype.getNodesValByTag = function(xml, tag) {
	var ns = this.getNodesByTag(xml, tag);
	var vals = new Array();
	for(var i=0; i<ns.length; i++) {
		if(ns[i].childNodes.length > 0) {
			vals.push(ns[i].childNodes[0].nodeValue);
		}
	}
	return vals;
}
usgin.Xml.Base.prototype._getNodesByTag = function(xml, tag) {
	var pt = tag.split(":");
	if (pt.length > 1) {
		return xml.getElementsByTagNameNS(this.getNamespace(pt[0]), pt[1]);
	}else{
		return xml.getElementsByTagName(pt[0]);
	}
}
usgin.Xml.IE = function() {
	this.id = "xml parser for ie";
}
usgin.Xml.IE.prototype = new usgin.Xml.Base();
usgin.Xml.IE.prototype._getNodesByTag = function(xml, tag) {
	return xml.getElementsByTagName(tag);
}
 
usgin.CSW = function(url, proxy) {
    this.url = url;
    this.proxy = proxy;
    this.logger = new usgin.Logger();
	this.capxml = null; 
	this.xml = new usgin.Xml.getXmlParser(usgin.Util.getBrowserInfo(), {
		'csw': 'http://www.opengis.net/cat/csw/2.0.2',
		'ogc': 'http://www.opengis.net/ogc',
		'ows': 'http://www.opengis.net/ows',
		'xlink': 'http://www.w3.org/1999/xlink',
		'dc': 'http://purl.org/dc/elements/1.1/',
		'dct': 'http://purl.org/dc/terms/'
	});
	this.pageSize = 20; 
}
usgin.CSW.prototype.init = function(callback) {
	var c = this;
    if(c.capxml == null) {
        var ajax = new usgin.Ajax(c.proxy, false, {
            endpoint: c.url,
            service: 'CSW',
            acceptVersions: '2.0.2',
            request: 'GetCapabilities'}).get(
            function(xml){
				c.capxml = xml;
				if(usgin.Util.isFunction(callback)) {
					callback(xml);
				}
            },
            function(msg){
                this.logger.error("get csw capabilities failed");
            }
        );
    } else {
		callback(c.capxml);
	}
}
usgin.CSW.prototype.setCapabilities = function(xml) {
	this.capxml = xml;
}
usgin.CSW.prototype.getCapabilities = function() {
	if (this.capxml == null) {
		throw new Error("CSW object not ready, please execute init() function first. from prototype");
	}
	return this.capxml;
}
usgin.CSW.prototype.setPageSize = function(size) {
	this.pageSize = size;
}
usgin.CSW.prototype.getRecords = function(literal, property, bbox, startPosition, success, error) {
	var op = this.xml.getNodeByAttr(this.getCapabilities(),'ows:OperationsMetadata/ows:Operation','name','GetRecords');
	var params = {
		endpoint: this.url,
		service: 'CSW',
		version: this.getVersion(),
		REQUEST: op.getAttribute('name'),
		typeNames: this.getParamOpts(op, 'typeNames')[0], // csw:Record, gmd:MD_Metadata
		ElementSetName: 'full', // this.getParamOpts(op, 'ElementSetName')[0],
		resultType: this.getParamOpts(op, 'resultType')[0], // results, hits, validate
		outputFormat: this.getParamOpts(op, 'outputFormat')[0], // application/xml, text/xml
		outputSchema: this.getParamOpts(op, 'outputSchema')[0], // http://www.opengis.net/cat/csw/2.0.2, http://www.isotc211.org/2005/gmd
		maxRecords: this.pageSize,
		startPosition: (usgin.Util.validVar(startPosition)  && parseInt(startPosition) > 0)? startPosition : 1,
	};
	if( usgin.Util.validVar(literal) && literal.trim() != '' && literal.trim() != '%' && literal.trim() != '?') {
		params.CONSTRAINTLANGUAGE = "FILTER"; // this.getParamOpts(op, 'CONSTRAINTLANGUAGE')[0],
       	params.CONSTRAINT_LANGUAGE_VERSION = '1.1.0';
        params.Constraint = this.buildFilter(literal, property, bbox);
	}
	var w = this;
	this.request(params, function(xml){
		var rslts = w.toJsRecords(xml);
		success(rslts);
	}, error);
}
usgin.CSW.prototype.buildFilter = function(literal, property, bbox) {
	var b = usgin.Util.validVar(bbox) || literal.indexOf('wms') >= 0 || literal.indexOf('wfs') >= 0;
	var c = "<ogc:Filter xmlns:ogc='http://www.opengis.net/ogc' xmlns:gml='http://www.opengis.net/gml'>";
	c += b ? "<ogc:And>" : "";
	c += literal.indexOf('wms') < 0 ? "" : "<ogc:PropertyIsLike wildCard='%' singleChar='_' escape='\\'>"
		+ "<ogc:PropertyName>subject</ogc:PropertyName>"
		+ "<ogc:Literal>%wms%</ogc:Literal></ogc:PropertyIsLike>";
	c += literal.indexOf('wfs') < 0 ? "" : "<ogc:PropertyIsLike wildCard='%' singleChar='_' escape='\\'>"
		+ "<ogc:PropertyName>subject</ogc:PropertyName>"
		+ "<ogc:Literal>%wfs%</ogc:Literal></ogc:PropertyIsLike>";
	c += "<ogc:PropertyIsLike wildCard='%' singleChar='_' escape='\\'>"
		+ "<ogc:PropertyName>" + (usgin.Util.validVar(property) ? property : "AnyText") + "</ogc:PropertyName>"
		+ "<ogc:Literal>" + literal + "</ogc:Literal></ogc:PropertyIsLike>";
	c += usgin.Util.validVar(bbox) ? "<ogc:BBOX><ogc:PropertyName>ows:BoundingBox</ogc:PropertyName><gml:Envelope>"
		+ "<gml:lowerCorner>" + bbox.minx + " " + bbox.miny + "</gml:lowerCorner>"
		+ "<gml:upperCorner>" + bbox.maxx + " " + bbox.maxy + "</gml:upperCorner>"
		+ "</gml:Envelope></ogc:BBOX>" : "";
	c += b ? "</ogc:And>" : "";
	c += "</ogc:Filter>"
	this.logger.debug(c);
	return c;	
}
usgin.CSW.prototype.toJsRecords = function(xml) {
	var n = this.xml.getNodeByTag(xml, "csw:SearchResults");
	var results = {
		elementSet: n.getAttribute('elementSet'),
		nextRecord: parseInt(n.getAttribute('nextRecord')),
		numberOfRecordsMatched: parseInt(n.getAttribute('numberOfRecordsMatched')),
		numberOfRecordsReturned: parseInt(n.getAttribute('numberOfRecordsReturned')),
		records: new Array()
	}
	var rs = this.xml.getNodesByTag(n, "csw:Record");
	for(var i=0; i<rs.length; i++) {
		var r = {
			identifier: this.xml.getNodeValByTag(rs[i], "dc:identifier"),
			title: this.xml.getNodeValByTag(rs[i], 'dc:title'),
			abstract: this.xml.getNodeValByTag(rs[i], 'dct:abstract'),
			subjects: this.xml.getNodesValByTag(rs[i], 'dc:subject'),
			type: this.xml.getNodeValByTag(rs[i], 'dc:type'),
			references: this.xml.getNodesValByTag(rs[i], 'dct:references'),
			wsg84BoundingBox : this.getBoundingBox(rs[i], "ows:WGS84BoundingBox"),
			boundingBox: this.getBoundingBox(rs[i], "ows:BoundingBox"),
		}
		results.records.push(r);
	}	
	return results;
}
usgin.CSW.prototype.getBoundingBox = function(rs, node) {
	var box = this.xml.getNodeByTag(rs, node);
	if (usgin.Util.validVar(box)) {
		var lower = this.xml.getNodeValByTag(box, 'ows:LowerCorner').split(" ");
		var upper = this.xml.getNodeValByTag(box, 'ows:UpperCorner').split(" ");
		return [parseFloat(lower[0]), parseFloat(lower[1]), parseFloat(upper[0]), parseFloat(upper[1])];
	} else {
		return "unknown";
	}
}
usgin.CSW.prototype.getRecordById = function(id, success, error) {
	var op = this.xml.getNodeByAttr(this.getCapabilities(), 'ows:OperationsMetadata/ows:Operation', 'name', 'GetRecordById');
	var params = {
		endpoint: this.url,
		service: 'CSW',
		version: this.getVersion(),
		REQUEST: op.getAttribute('name'),
		//ElementSetName: this.getParamOpts(op, 'ElementSetName')[0],
		ElementSetName: 'full',
		outputFormat: 'application/xml',
		Id: id
	};
	this.request(params, success, error);
}
usgin.CSW.prototype.getVersion = function() {
	var v = this.xml.getNodeByTag(this.getCapabilities(), 'ows:ServiceIdentification/ows:ServiceTypeVersion');
	return v.childNodes[0].nodeValue;
}
usgin.CSW.prototype.getParamOpts = function(op, pname) {
	var param = this.xml.getNodeByAttr(op, 'ows:Parameter', 'name', pname);
	var opts = this.xml.getNodesByTag(param, 'ows:Value');
	var rslt = [];
	for(var i=0; i<opts.length; i++) {
		rslt.push(opts[i].childNodes[0].nodeValue);
	}
	return rslt;
}
usgin.CSW.prototype.request = function(params, success, error) {
	var c = this;
	var ajax = new usgin.Ajax(this.proxy, false, params).get(function(xml){
		var ex = c.xml.getNodeByTag(xml, 'ows:Exception');
		if (!usgin.Util.validVar(ex)) {
			success(xml);
		}else{
			error(xml);
		}
	}, error);
}
 
usgin.WMS = function(url, proxy) {
    this.url = url;
    this.proxy = proxy;
    this.logger = new usgin.Logger();
	this.capxml = null; 
	this.xml = new usgin.Xml.getXmlParser(usgin.Util.getBrowserInfo(), {});
}
usgin.WMS.prototype.loading = function(success, error) {
	var w = this;
    if(w.capxml == null) {
        var ajax = new usgin.Ajax(w.proxy, true, {endpoint: w.url}).get(
            function(xml) {
				w.capxml = xml;
				if(usgin.Util.isFunction(success)) {
					success(xml);
				}
            },
            function(msg){
                w.logger.error("get WMS capabilities failed");
				error(msg);
            }
        );
    } else {
		success(w.capxml);
	}
}
usgin.WMS.prototype.getLayers = function(callback) {
	var w = this;
	this.loading (function(xml) {
		var lys = w.xml.getNodesByTag(xml, "Capability/Layer/Layer");
		var rslt = [];
		for (var i=0; i<lys.length; i++) {
			rslt.push({
				"linkURL": w.getWMSEndpoint(),
				"APILabel": "OGC:WMS",
				"linkParameters": [{
					"linkParameterLabel": "layerName",
					"linkParameterValue": w.xml.getNodeValByTag(lys[i], "Title")
				}]
			});
		}
		callback(rslt);
	}, function(err_msg){
		callback([]);
	});
}
usgin.WMS.prototype.getWMSEndpoint = function() {
	if (this.url.indexOf("?") < 0) {
		return this.url;
	} else {
		return this.url.substring(0, this.url.indexOf("?"))
	}
}
 
usgin.WFS = function(url, proxy) {
    this.url = url;
    this.proxy = proxy;
    this.logger = new usgin.Logger();
	this.capxml = null; 
	this.xml = new usgin.Xml.getXmlParser(usgin.Util.getBrowserInfo(), {
		'wfs': 'http://www.opengis.net/wfs', 
		'ogc': 'http://www.opengis.net/ogc',
		'gml': 'http://www.opengis.net/gml', 
		'ows': 'http://www.opengis.net/ows',
		'xsi': 'http://www.w3.org/2001/XMLSchema-instance', 
		'xlink': 'http://www.w3.org/1999/xlink', 
		'aasg': 'http://stategeothermaldata.org/uri-gin/aasg/xmlschema/bhlithinterval/0.9'
	});
}
usgin.WFS.prototype.loading = function(success, error) {
	var w = this;
    if(w.capxml == null) {
        var ajax = new usgin.Ajax(w.proxy, true, {endpoint: w.url}).get(
            function(xml) {
				w.capxml = xml;
				if(usgin.Util.isFunction(success)) {
					success(xml);
				}
            },
            function(msg){
                w.logger.error("get WFS capabilities failed");
				error(msg);
            }
        );
    } else {
		success(w.capxml);
	}
}
usgin.WFS.prototype.getBbox = function(xml) {
	var low = this.xml.getNodeValByTag(xml, "ows:WGS84BoundingBox/ows:LowerCorner").split(" ");	
	var up  = this.xml.getNodeValByTag(xml, "ows:WGS84BoundingBox/ows:UpperCorner").split(" ");	
	return [parseFloat(low[0]), parseFloat(low[1]), parseFloat(up[0]), parseFloat(up[1])];
}
usgin.WFS.prototype.getLayers = function(callback) {
	var w = this;
	this.loading (function(xml) {
		var lys = w.xml.getNodesByTag(xml, "wfs:FeatureTypeList/FeatureType");
		var rslt = [];
		for (var i=0; i<lys.length; i++) {
			rslt.push({
				"linkURL": w.getWFSEndpoint(),
				"APILabel": "OGC:WFS",
				"linkParameters": [
					{"linkParameterLabel":"featureType", "linkParameterValue": w.xml.getNodeValByTag(lys[i], "wfs:Name")},
					{"linkParameterLabel":"title", "linkParameterValue": w.xml.getNodeValByTag(lys[i], "wfs:Title")},
					{"linkParameterLabel":"defaultSRS", "linkParameterValue": w.xml.getNodeValByTag(lys[i], "wfs:DefaultSRS")},
					{"linkParameterLabel":"wgs84bbox", "linkParameterValue": w.getBbox(lys[i])}
				]
			});
		}
		callback(rslt);
	}, function(err_msg){
		callback([]);
	});
}
usgin.WFS.prototype.getWFSEndpoint = function() {
	if (this.url.indexOf("?") < 0) {
		return this.url;
	} else {
		return this.url.substring(0, this.url.indexOf("?"))
	}
}
usgin.CSWwidget = function(container, conf) {
	this.container = $("#" + container);
	this.logger = new usgin.Logger();
	this.owner = null;
	this.title = null;
	this.pageSize = null;	
	this.proxy = null;
	this.csws = null;
	this.results = null;
	this.titleBar = null;	
	this.closeBtn = null;
	this.fieldSelector = null;
	this.findInput = null;
	this.pageSizeSelector = null;
	this.cswSelector = null;
	this.findBtn = null;
	this.wmsCheck = null;
	this.wfsCheck = null;
	this.extentBtn = null;
	this.minxInput = null;
	this.minyInput = null;
	this.maxxInput = null;
	this.maxyInput = null;
	this.clearBBoxBtn = null;
	this.recordSelector = null;
	this.pagePanel = null;
	this.totalLabel = null;
	this.prePageBtn = null;
	this.nextPageBtn = null;
	this.pageLabel = null;
	this.spinner = null;
	this.infoBoard = null;
	this.serviceTypeLabel = null;
	this.abstractBtn = null;
	this.subjectBtn = null;
	this.spatialBtn = null;
	this.recordSelectedListener = null;	
	this.agents = {};
	var w = this;
	this.loadConf(conf, function(){
		w.init();
	});
}
usgin.CSWwidget.prototype.init = function() {
	this.logger.debug("CSWwidget initializing");
	var ctn = this.container.addClass("csw-panel").css("position","absolute");
	var frm = $("<table><tr><th class='title' colspan=4></th></tr></table>").addClass('csw-table');	
	frm.find("th").append(this.getTitleBar());
	frm.find("th").append(this.getCloseBtn());
	frm.append($("<tr>")
		.append($("<th colspan='2'>").text("Find:"))
		.append($("<th width='50em'>").text("Maximum:"))
	).append($("<tr>")
		.append($("<td>").append(this.getFieldSelector()))
		.append($("<td>").append(this.getFindInput()))
		.append($("<td>").append(this.getPageSizeSelector()))
	).append($("<tr>")
		.append($("<th colspan='3'>").text("In Catalog:"))
	).append($("<tr>")
		.append($("<td colspan='2'>").append(this.getCswSelector()))
		.append($("<td>").append(this.getFindBtn()))
	).append($("<tr>")
		.append($("<td colspan='3'>").append($("<label for='wmsCheck'>").html("wms&nbsp;").css("cursor","pointer")).append(this.getWmsCheck())
		.append("&nbsp;&nbsp;&nbsp;")
		.append($("<label for='wfsCheck'>").html("wfs&nbsp;").css("cursor","pointer")).append(this.getWfsCheck())
		.append(this.getExtentBtn().css("float","right")))
	).append($("<tr>")
		.append($("<td colspan=3>").append($("<div id='extentInput'>").css("display","none")
		.append($("<label>").html("minx&nbsp;&nbsp;")).append(this.getMinxInput())
		.append($("<label>").html("&nbsp;&nbsp;miny&nbsp;&nbsp;")).append(this.getMinyInput())
		.append($("<label>").html("&nbsp;&nbsp;maxx&nbsp;&nbsp;")).append(this.getMaxxInput())
		.append($("<label>").html("&nbsp;&nbsp;maxy&nbsp;&nbsp;")).append(this.getMaxyInput())
		.append(this.getClearBBoxBtn())
		))
	).append($("<tr>")
		.append($("<td colspan='3'>").append($("<hr class='csw-hr'>").append(this.getSpinner())))
	).append($("<tr>")
		.append($("<th>").html("Results:"))
		.append($("<td colspan='2'>")
			.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")
		.append(this.getPagePanel().append(this.getTotalLabel()).append(this.getPrePageBtn()).append(this.getPageLabel()).append(this.getNextPageBtn())))
	).append($("<tr>")
		.append($("<td colspan='3'>").append(this.getRecordSelector()))
	).append($("<tr>")
		.append($("<th colspan='3'>").text("Information:").append("&nbsp;&nbsp;&nbsp;&nbsp;")
		.append(this.getServiceTypeLabel())
		.append(this.getSpatialBtn()).append(this.getSubjectBtn()).append(this.getAbstractBtn()))
	).append($("<tr>")
		.append($("<td colspan='3'>").append($("<div class='csw-infoboard-box'>").append(this.getInfoBoard())))
	).append($("<tr>")
		.append($("<td colspan='3'>").append($("<div>")))
	);	
	ctn.append(frm);
}
usgin.CSWwidget.prototype.loadConf = function(url, func) {
	var parser = new usgin.Xml.getXmlParser(usgin.Util.getBrowserInfo(),{});
	var w = this;
	var ajax = new usgin.Ajax(url, true, {}).get(function(xml){
		w.owner = parser.getNodeValByTag(xml, 'usgin/jsCSWwidget/owner');	
		w.title = parser.getNodeValByTag(xml, 'usgin/jsCSWwidget/title');
		w.proxy = parser.getNodeValByTag(xml, 'usgin/jsCSWwidget/proxy');
		w.pageSize = parseInt(parser.getNodeValByTag(xml, 'usgin/jsCSWwidget/pageSize'));
		w.csws = parser.getNodesValByTag(xml, 'usgin/jsCSWwidget/services/csw');
		w.logger.debug(w);
		func();
	}, function(msg){
		w.logger.error(msg);	
	});
}
usgin.CSWwidget.prototype.getTitleBar = function() {
	if(this.titleBar == null) {
		var tb = $.parseHTML("<div class='csw-draggable csw-titlebar' movetarget='" + this.container.attr("id") + "'>" 
					+ "<div class='csw-org'> " + this.owner + "</div>" + this.title + "</div>");
		this.enableDrag(tb);
		this.titleBar = tb;
	}
	return this.titleBar;
}
usgin.CSWwidget.prototype.getCloseBtn = function() {
	if(this.closeBtn == null) {
		var btn = $($.parseHTML("<div class='csw-cross'>x</div>"));
		var w =this;
		btn.click(function(e){
			w.close();
		});
		this.closeBtn = btn;
	}
	return this.closeBtn;
}
usgin.CSWwidget.prototype.getFieldSelector = function() {
	if(this.fieldSelector == null) {
		var fs = $($.parseHTML("<select name='fieldSelector' class='csw-select'>"));
		var flds = ["AnyText", "Title", "Abstract"];
		for(var i=0; i<flds.length; i++) {
			fs.append($.parseHTML("<option value='" + flds[i] + "'>" + flds[i] + "</option>"));
		}
		this.fieldSelector = fs;
	}
	return this.fieldSelector;
}
usgin.CSWwidget.prototype.getFindInput = function() {
	if(this.findInput == null) {
		var ipt = $($.parseHTML("<input type='text' class='csw-input'>"));
		var w = this;
		ipt.keypress(function(event) {
			var keycode = (event.keyCode ? event.keyCode : event.which);
			if(keycode == '13') {
				w.find();
			}
		});
		ipt.val("land use");
		this.findInput = ipt;
	}
	return this.findInput;
}
usgin.CSWwidget.prototype.getPageSizeSelector = function() {
	if(this.pageSizeSelector == null) {
		var ps = $($.parseHTML("<select name='pageSize' class='csw-select'/>"));
		for(var i=0; i<=6; i++) {
			$(ps).append($.parseHTML("<option value='" + (this.pageSize + i*10) + "'>&nbsp;&nbsp;&nbsp;&nbsp; "
						+ (this.pageSize + i*10)+"</option>"));
		}
		this.pageSizeSelector = ps;
	}
	return this.pageSizeSelector;
}
usgin.CSWwidget.prototype.getCswSelector = function() {
	if(this.cswSelector == null) {
		var cs = $($.parseHTML("<select name='cswSelector' class='csw-select' />"));
		for(var i=0; i<this.csws.length; i++) {
			$(cs).append($.parseHTML("<option value='"+this.csws[i]+"'>"+this.csws[i]+"</option>"));
		}
		this.cswSelector = cs;
	}
	return this.cswSelector;
} 
usgin.CSWwidget.prototype.getFindBtn = function() {
	if (this.findBtn == null) {
		var btn = $($.parseHTML("<input type='button' value='Find' class='csw-button' />"));
		var w = this;
		btn.click(function(e){
			w.find();
		});
		this.findBtn = btn;
	}
	return this.findBtn;
}
usgin.CSWwidget.prototype.getWmsCheck = function() {
	if (this.wmsCheck == null) {
		var wc = $($.parseHTML("<input type='checkbox' class='csw-check' id='wmsCheck'>")); 
		this.wmsCheck = wc;
	}
	return this.wmsCheck;
}
usgin.CSWwidget.prototype.getWfsCheck = function() {
	if (this.wfsCheck == null) {
		var wc = $($.parseHTML("<input type='checkbox' class='csw-check' id='wfsCheck'>")); 
		this.wfsCheck = wc;
	}
	return this.wfsCheck;
}
usgin.CSWwidget.prototype.getExtentBtn = function() {
	if (this.extentBtn == null) {
		var eb = $($.parseHTML("<a class='csw-linkbutton'>extent</a>"));
		var w = this;
		eb.click(function(e){
			$("#extentInput").toggle()			
		});
		this.extentBtn = eb;
	}
	return this.extentBtn;
}
usgin.CSWwidget.prototype.getMinxInput = function() {
	if (this.minxInput == null) {
		var w = $($.parseHTML("<input type='text' class='csw-bbox-input'>"));
		this.minxInput = w;
	}
	return this.minxInput;
}
usgin.CSWwidget.prototype.getMinyInput = function() {
	if (this.minyInput == null) {
		var w = $($.parseHTML("<input type='text' class='csw-bbox-input'>"));
		this.minyInput = w;
	}
	return this.minyInput;
}
usgin.CSWwidget.prototype.getMaxxInput = function() {
	if (this.maxxInput == null) {
		var w = $($.parseHTML("<input type='text' class='csw-bbox-input'>"));
		this.maxxInput = w;
	}
	return this.maxxInput;
}
usgin.CSWwidget.prototype.getMaxyInput = function() {
	if (this.maxyInput == null) {
		var w = $($.parseHTML("<input type='text' class='csw-bbox-input'>"));
		this.maxyInput = w;
	}
	return this.maxyInput;
}
usgin.CSWwidget.prototype.getClearBBoxBtn = function() {
	if (this.clearBBoxBtn == null) {
		var btn = $($.parseHTML("<i class='fa fa-trash fa-fw csw-bbox-clear' title='clear input envelope'>"));
		var w = this;
		btn.click(function(e){
			w.getMinxInput().val("");
			w.getMinyInput().val("");
			w.getMaxxInput().val("");
			w.getMaxyInput().val("");
		});
		this.clearBBoxBtn = btn;
	}
	return this.clearBBoxBtn;
}
usgin.CSWwidget.prototype.getPagePanel = function() {
	if (this.pagePanel == null) {
		var pp = $($.parseHTML("<div class='csw-pager'/>"));
		this.pagePanel = pp;
	}
	return this.pagePanel;
}
usgin.CSWwidget.prototype.getTotalLabel = function() {
	if (this.totalLabel == null) {
		var tl = $($.parseHTML("<i class='csw-pager-total'>"));
		this.totalLabel = tl;
	}
	return this.totalLabel;
}
usgin.CSWwidget.prototype.getPrePageBtn = function() {
	if (this.prePageBtn == null) {
		var btn = $($.parseHTML("<i class='fa fa-chevron-left csw-btn-disabled' />"));
		var w = this;
		btn.css("padding-right", "0.5em");
		btn.click(function(e){
			if(btn.hasClass("csw-btn-enabled")) {
				w.findPage(btn.startPosition);
			}
		});
		this.prePageBtn = btn;
	}
	return this.prePageBtn;
}
usgin.CSWwidget.prototype.getNextPageBtn = function() {
	if (this.nextPageBtn == null) {
		var btn = $($.parseHTML("<i class='fa fa-chevron-right csw-btn-disabled' />"));
		var w = this;
		btn.css("padding-left", "0.5em");
		btn.click(function(e){
			if(btn.hasClass("csw-btn-enabled")) {
				w.findPage(btn.startPosition);
			}
		});
		this.nextPageBtn = btn;
	}
	return this.nextPageBtn;
}
usgin.CSWwidget.prototype.getPageLabel = function() {
	if (this.pageLabel == null) {
		var btn = $($.parseHTML("<span></span>"));
		this.pageLabel = btn;
	}
	return this.pageLabel;
}
usgin.CSWwidget.prototype.getRecordSelector = function() {
	if(this.recordSelector == null) {
		var rs = $($.parseHTML("<select name='recordSelector' class='csw-select' size='10'/>"));
		var w = this;
		rs.change(function () {
			w.showInfo();
		});
		this.recordSelector = rs;
	}
	return this.recordSelector;
}
usgin.CSWwidget.prototype.getInfoBoard = function() {
	if(this.infoBoard == null) {
		var ib = $($.parseHTML("<div class='csw-infoboard-content'/>"));
		ib.currentTheme = 'abstract';
		$(ib).html("&nbsp;")
		this.infoBoard = ib;
	}
	return this.infoBoard;
}
usgin.CSWwidget.prototype.getServiceTypeLabel = function() {
	if(this.serviceTypeLabel == null) {
		var stl = $($.parseHTML("<i class='csw-infoboard-type'/>"));
		this.serviceTypeLabel = stl;
	}
	return this.serviceTypeLabel;
}
usgin.CSWwidget.prototype.getAbstractBtn = function() {
	if(this.abstractBtn == null) {
		var btn = $($.parseHTML("<i class='fa fa-file-text fa-fw csw-infoboard-btn csw-infoboard-btn-disabled' title='Abstract'/>"));
		var w = this;
		btn.click(function(e) {
			w.showInfo('abstract');
		});
		this.abstractBtn = btn;
	}
	return this.abstractBtn;
}
usgin.CSWwidget.prototype.getSubjectBtn = function() {
	if(this.subjectBtn == null) {
		var btn = $($.parseHTML("<i class='fa fa-tags fa-fw csw-infoboard-btn csw-infoboard-btn-disabled' title='Subject'/>"));
		var w = this;
		btn.click(function(e) {
			w.showInfo('subjects');
		});
		this.subjectBtn = btn;
	}
	return this.subjectBtn;
}
usgin.CSWwidget.prototype.getSpatialBtn = function() {
	if (this.spatialBtn == null) {
		var btn = $($.parseHTML("<i class='fa fa-globe fa-fw csw-infoboard-btn csw-infoboard-btn-disabled' title='Spatial Parameters'/>"));
		var w = this;
		btn.click(function(e) {
			w.showInfo('spatial');
		});
		this.spatialBtn = btn;
	}
	return this.spatialBtn;
}
usgin.CSWwidget.prototype.getSpinner = function() {
	if (this.spinner == null) {
		var s = $($.parseHTML("<i class='fa fa-circle-o-notch fa-spin csw-spinner'>")).hide();
		this.spinner = s;
	}
	return this.spinner;
}
/* ================================================================================= */
usgin.CSWwidget.prototype.enableDrag = function(obj) {
	var s = 'csw-dragging';
	$(obj).mousedown(function(e){
		var t = $("#" + $(this).attr("movetarget"));
		var y = e.pageY - t.position().top;
		var x = e.pageX - t.position().left;
		t.addClass(s).parents().on("mousemove", function(e) {
			if (!t.hasClass(s)) return;
			t.offset({
				top:e.pageY-y, left:e.pageX-x
			}).on('mouseup', function(e){
				t.removeClass(s);
			});
			e.preventDefault();
		});
	}).mouseup(function(e){
		$('.'+s).removeClass(s);
	});	
}
usgin.CSWwidget.prototype.close = function() {
	this.container.hide("slow");
}
usgin.CSWwidget.prototype.show = function() {
	this.container.show("slow");
}
usgin.CSWwidget.prototype.showAt = function(x, y) {
	this.container.show("slow");
	this.container.offset({top:y, left:x});
}
usgin.CSWwidget.prototype.setSize = function(width, height) {
	this.container.height(height);
	this.container.width(width);
}
usgin.CSWwidget.prototype.find = function() {
	this.findPage(0);
}
usgin.CSWwidget.prototype.findPage = function(startPosition) {
	var w = this;
	var url = this.getCswSelector().val();
	var key = this.getFindInput().val();
	key += this.getWmsCheck().prop('checked') ? " wms" : "";
	key += this.getWfsCheck().prop('checked') ? " wfs" : ""; 
	w.logger.debug(key);
	var csw = this.agents[url];
	if (!usgin.Util.validVar(csw)) {
		csw = new usgin.CSW(url, this.proxy);
		this.agents[url] = csw;
	}
	csw.setPageSize(this.getPageSizeSelector().val());
	csw.init(function(xml){
		w.loading();
		csw.getRecords(key, w.getFieldSelector().val(), w.getBBoxFilter(), startPosition, function(results) {
			w.results = results;
			w.displayResults();
		}, function(msg) {
			w.logger.error(msg);
			w.results = {
				elementSet: 'full',
				nextRecord: 0,
				numberOfRecordsMatched: 0,
				numberOfRecordsReturned: 0,
				records: new Array()
			};
			w.displayResults();
			w.getTotalLabel().html("<span class='csw-infoboard-error'>Server response error<span>");
		});
	});
}
usgin.CSWwidget.prototype.displayResults = function() {
	this.finish();
	var slct = this.getRecordSelector();
	slct.find("option").remove();
	for(var i=0; i<this.results.records.length; i++){
		var rc = this.results.records[i];
		//this.logger.debug(rc);
		slct.append($.parseHTML("<option value='"+rc.identifier+"'>"+"* "+rc.title+"</option>"));	
	}
	slct.find('option:first').prop('selected', 'selected');
	this.showInfo();
	this.updatePager(this.results);
}
usgin.CSWwidget.prototype.getRecordById = function(id) {
	for(var i=0; i<this.results.records.length; i++) {
		var rc = this.results.records[i];
		if(rc.identifier == id) {
			return rc;
		}
	}
	return null;
}
usgin.CSWwidget.prototype.showInfo = function(theme) {
	var opt = this.getRecordSelector().find("option:selected");
	if (usgin.Util.validVar(opt) && opt.length > 0) {
		var rc = this.getRecordById(opt.val());
		var cnt = "";
		var color = "";
		if (usgin.Util.validVar(rc)) {
			theme = usgin.Util.validVar(theme) ? theme : this.getInfoBoard().currentTheme;
			if (theme == 'abstract') {
				cnt = rc[theme];	
				color = "#a1ec21";
			} else if (theme == 'subjects') {
				for (var i=0; i<rc[theme].length; i++) {
					cnt += (i >0 ? ", " : "") + rc[theme][i];
				}
				color = "#f8ce0d";
			} else if (theme == 'spatial') {
				cnt += "<li>BoundingBox(wgs84): " + rc.wsg84BoundingBox + "<br/>";
				cnt += "<li>BoundingBox: " + rc.boundingBox + "<br/>";
				color = "#2bece5";
			}
			this.getInfoBoard().html(cnt);
			this.getInfoBoard().css("color", color);
			this.getInfoBoard().currentTheme = theme;
			this.getServiceTypeLabel().html(rc.type);
			$(".csw-infoboard-btn").removeClass("csw-btn-disabled").addClass("csw-btn-enabled");
			
			if (usgin.Util.isFunction(this.recordSelectedListener)) {
				this.wmswfs();
			}
		}
	}else{
		this.clearInfo();
	}
}
usgin.CSWwidget.prototype.clearInfo = function() {
	$(".csw-infoboard-btn").removeClass("csw-btn-enabled").addClass("csw-btn-disabled");
	this.getInfoBoard().html("");
	this.getServiceTypeLabel().html("");
}
usgin.CSWwidget.prototype.updatePager = function(rs) {
	var pl = this.getPageLabel();	
	var ps = this.getPageSizeSelector().val();
	
	if (rs.numberOfRecordsMatched > 0) { 
		var cu = (rs.nextRecord == 0) ? Math.ceil(rs.numberOfRecordsMatched/ps) : Math.ceil((rs.nextRecord-1)/ps);
		var tt = Math.ceil(rs.numberOfRecordsMatched / ps);
		pl.html(cu + " / " + tt);
		this.getTotalLabel().html("Total: " + rs.numberOfRecordsMatched + " hits");
	} else {
		pl.html("");
		this.getTotalLabel().html("Total: 0 hits");
	}
	if(rs.nextRecord == 0 || rs.nextRecord >= rs.numberOfRecordsMatched) {
		this.getNextPageBtn().removeClass('csw-btn-enabled').addClass('csw-btn-disabled');
	} else {
		this.getNextPageBtn().removeClass('csw-btn-disabled').addClass('csw-btn-enabled');
		this.getNextPageBtn().startPosition = rs.nextRecord;
	}
	if(rs.nextRecord - ps <= 1) {
		this.getPrePageBtn().removeClass('csw-btn-enabled').addClass('csw-btn-disabled');
	} else {
		this.getPrePageBtn().removeClass('csw-btn-disabled').addClass('csw-btn-enabled');
		this.getPrePageBtn().startPosition = rs.nextRecord - ps*2;
	}
}
usgin.CSWwidget.prototype.getBBoxFilter = function() {
	var reg =  /^[-+]?[0-9]+\.?[0-9]*$/;  
	var minx = this.getMinxInput().val().replace(/\s+/g, "");
	var miny = this.getMinyInput().val().replace(/\s+/g, "");
	var maxx = this.getMaxxInput().val().replace(/\s+/g, "");
	var maxy = this.getMaxyInput().val().replace(/\s+/g, "");
	return (reg.test(minx) && reg.test(miny) && reg.test(maxx) && reg.test(maxy)) ?
		{minx:minx, miny:miny, maxx:maxx, maxy:maxy} : null
}
usgin.CSWwidget.prototype.loading = function() {
	this.getSpinner().show();
}
usgin.CSWwidget.prototype.finish = function() {
	this.getSpinner().hide();
}
usgin.CSWwidget.prototype.wmswfs = function() {
	var opt = this.getRecordSelector().find("option:selected");
	if (usgin.Util.validVar(opt) && opt.length > 0) {
		var rc = this.getRecordById(opt.val());
		var layers = [];
		try {
			this.wmswfsChain(rc, 0, layers);
		} catch(e) {
			var jsn = {"result":{
				"status": "ERROR",
				"message": e 
			}};
			this.recordSelectedListener(jsn);
		}
	}
}
usgin.CSWwidget.prototype.wmswfsChain = function(rc, idx, layers) {
	var refs = rc.references;
	if (idx >= refs.length) {
		var jsn = null;
		if (layers.length > 0) {
			jsn = {"result":{
				"status": "OK",
				"bbox": rc.wsg84BoundingBox,
				"title": rc.title,
				"links": layers	
			}};		
		} else {
			jsn = {"result":{
				"status": "No results"
			}};	
		}
		this.recordSelectedListener(jsn);	
		return;
	}
	var url = refs[idx].toLowerCase();
	var w = this;
	if ( url.search('request=getcapabilities') >0 && url.search('service=wms') >0 ) {
		var wms = new usgin.WMS(refs[idx], this.proxy);
		wms.getLayers (function(lys) {
			for (var i=0; i<lys.length; i++) {
				layers.push(lys[i]);
			}
			w.wmswfsChain(rc, idx+1, layers);
		}, function(msg){
			throw msg;
		});
	} else if ( url.search('request=getcapabilities') >0 && url.search('service=wfs') >0 ) {
		var wfs = new usgin.WFS(refs[idx], this.proxy);
		wfs.getLayers (function(lys) {
			for (var i=0; i<lys.length; i++) {
				layers.push(lys[i]);
			}
			w.wmswfsChain(rc, idx+1, layers);
		}, function (msg) {
			throw msg;
		});	
	} else {
			w.wmswfsChain(rc, idx+1, layers);
	}   
}
usgin.CSWwidget.prototype.addRecordSelectedListener = function(lsnr) {
	this.recordSelectedListener = lsnr;
}
